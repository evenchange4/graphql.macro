// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`macros [gql] with fragment: [gql] with fragment 1`] = `

import { gql } from 'graphql.macro';
const userFragment = gql\`
  fragment UserEntry1 on User {
    firstName
  }
\`;
const query = gql\`
  query User {
    user(id: 5) {
      lastName
      ...UserEntry1
    }
  }
  \${userFragment}
\`;

      ↓ ↓ ↓ ↓ ↓ ↓

const userFragment = {
  "kind": "Document",
  "definitions": [{
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry1"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "firstName"
        },
        "arguments": [],
        "directives": []
      }]
    }
  }],
  "loc": {
    "start": 0,
    "end": 51,
    "source": {
      "body": "\\n  fragment UserEntry1 on User {\\n    firstName\\n  }\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1
      }
    }
  }
};
const query = {
  "kind": "Document",
  "definitions": [{
    "kind": "OperationDefinition",
    "operation": "query",
    "name": {
      "kind": "Name",
      "value": "User"
    },
    "variableDefinitions": [],
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "user"
        },
        "arguments": [{
          "kind": "Argument",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "value": {
            "kind": "IntValue",
            "value": "5"
          }
        }],
        "directives": [],
        "selectionSet": {
          "kind": "SelectionSet",
          "selections": [{
            "kind": "Field",
            "name": {
              "kind": "Name",
              "value": "lastName"
            },
            "arguments": [],
            "directives": []
          }, {
            "kind": "FragmentSpread",
            "name": {
              "kind": "Name",
              "value": "UserEntry1"
            },
            "directives": []
          }]
        }
      }]
    }
  }].concat(userFragment.definitions),
  "loc": {
    "start": 0,
    "end": 82,
    "source": {
      "body": "\\n  query User {\\n    user(id: 5) {\\n      lastName\\n      ...UserEntry1\\n    }\\n  }\\n  \\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1
      }
    }
  }
};

`;

exports[`macros [gql] without fragment: [gql] without fragment 1`] = `

import { gql } from 'graphql.macro';
const query = gql\`
  query User {
    user(id: 5) {
      lastName
      ...UserEntry1
    }
  }
\`;

      ↓ ↓ ↓ ↓ ↓ ↓

const query = {
  "kind": "Document",
  "definitions": [{
    "kind": "OperationDefinition",
    "operation": "query",
    "name": {
      "kind": "Name",
      "value": "User"
    },
    "variableDefinitions": [],
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "user"
        },
        "arguments": [{
          "kind": "Argument",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "value": {
            "kind": "IntValue",
            "value": "5"
          }
        }],
        "directives": [],
        "selectionSet": {
          "kind": "SelectionSet",
          "selections": [{
            "kind": "Field",
            "name": {
              "kind": "Name",
              "value": "lastName"
            },
            "arguments": [],
            "directives": []
          }, {
            "kind": "FragmentSpread",
            "name": {
              "kind": "Name",
              "value": "UserEntry1"
            },
            "directives": []
          }]
        }
      }]
    }
  }],
  "loc": {
    "start": 0,
    "end": 79,
    "source": {
      "body": "\\n  query User {\\n    user(id: 5) {\\n      lastName\\n      ...UserEntry1\\n    }\\n  }\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1
      }
    }
  }
};

`;

exports[`macros [loader] should work with relative path issue#52: [loader] should work with relative path issue#52 1`] = `

import { loader } from 'graphql.macro';
const query = loader('../__tests__/fixtures/query.graphql');

      ↓ ↓ ↓ ↓ ↓ ↓

const query = {
  "kind": "Document",
  "definitions": [{
    "kind": "OperationDefinition",
    "operation": "query",
    "name": {
      "kind": "Name",
      "value": "User"
    },
    "variableDefinitions": [],
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "user"
        },
        "arguments": [{
          "kind": "Argument",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "value": {
            "kind": "IntValue",
            "value": "5"
          }
        }],
        "directives": [],
        "selectionSet": {
          "kind": "SelectionSet",
          "selections": [{
            "kind": "Field",
            "name": {
              "kind": "Name",
              "value": "firstName"
            },
            "arguments": [],
            "directives": []
          }, {
            "kind": "Field",
            "name": {
              "kind": "Name",
              "value": "lastName"
            },
            "arguments": [],
            "directives": []
          }]
        }
      }]
    }
  }],
  "loc": {
    "start": 0,
    "end": 62,
    "source": {
      "body": "query User {\\n  user(id: 5) {\\n    firstName\\n    lastName\\n  }\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1
      }
    }
  }
};

`;

exports[`macros [loader] with absolute path and NODE_PATH: [loader] with absolute path and NODE_PATH 1`] = `

import { loader } from 'graphql.macro';
const query = loader('__tests__/fixtures/simpleFragment.graphql');

      ↓ ↓ ↓ ↓ ↓ ↓

const query = {
  "kind": "Document",
  "definitions": [{
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry1"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "firstName"
        },
        "arguments": [],
        "directives": []
      }]
    }
  }],
  "loc": {
    "start": 0,
    "end": 44,
    "source": {
      "body": "fragment UserEntry1 on User {\\n  firstName\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1
      }
    }
  }
};

`;

exports[`macros [loader] with absolute path and jsconfig include property: [loader] with absolute path and jsconfig include property 1`] = `

import { loader } from 'graphql.macro';
const query = loader('__tests__/fixtures/simpleFragment.graphql');

      ↓ ↓ ↓ ↓ ↓ ↓

const query = {
  "kind": "Document",
  "definitions": [{
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry1"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "firstName"
        },
        "arguments": [],
        "directives": []
      }]
    }
  }],
  "loc": {
    "start": 0,
    "end": 44,
    "source": {
      "body": "fragment UserEntry1 on User {\\n  firstName\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1
      }
    }
  }
};

`;

exports[`macros [loader] with absolute path: [loader] with absolute path 1`] = `

import { loader } from 'graphql.macro';
const query = loader('src/__tests__/fixtures/simpleFragment.graphql');

      ↓ ↓ ↓ ↓ ↓ ↓

const query = {
  "kind": "Document",
  "definitions": [{
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry1"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "firstName"
        },
        "arguments": [],
        "directives": []
      }]
    }
  }],
  "loc": {
    "start": 0,
    "end": 44,
    "source": {
      "body": "fragment UserEntry1 on User {\\n  firstName\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1
      }
    }
  }
};

`;

exports[`macros [loader] with fragment: [loader] with fragment 1`] = `

import { loader } from 'graphql.macro';
const query = loader('./fixtures/query1.graphql');

      ↓ ↓ ↓ ↓ ↓ ↓

const query = {
  "kind": "Document",
  "definitions": [{
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry1"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "firstName"
        },
        "arguments": [],
        "directives": []
      }]
    }
  }, {
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry3"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "id"
        },
        "arguments": [],
        "directives": []
      }]
    }
  }, {
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry2"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "lastName"
        },
        "arguments": [],
        "directives": []
      }]
    }
  }, {
    "kind": "OperationDefinition",
    "operation": "query",
    "name": {
      "kind": "Name",
      "value": "User"
    },
    "variableDefinitions": [],
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "user"
        },
        "arguments": [{
          "kind": "Argument",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "value": {
            "kind": "IntValue",
            "value": "5"
          }
        }],
        "directives": [],
        "selectionSet": {
          "kind": "SelectionSet",
          "selections": [{
            "kind": "FragmentSpread",
            "name": {
              "kind": "Name",
              "value": "UserEntry1"
            },
            "directives": []
          }, {
            "kind": "FragmentSpread",
            "name": {
              "kind": "Name",
              "value": "UserEntry2"
            },
            "directives": []
          }]
        }
      }]
    }
  }],
  "loc": {
    "start": 0,
    "end": 257,
    "source": {
      "body": "fragment UserEntry1 on User {\\n  firstName\\n}\\n\\nfragment UserEntry3 on User {\\n  id\\n}\\nfragment UserEntry2 on User {\\n  lastName\\n}\\n#import \\"./fragment1.graphql\\"\\n#import './fragment2.graphql'\\n\\nquery User {\\n  user(id: 5) {\\n    ...UserEntry1\\n    ...UserEntry2\\n  }\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1
      }
    }
  }
};

`;

exports[`macros [loader] with nested circular fragments: [loader] with nested circular fragments 1`] = `

import { loader } from 'graphql.macro';
const query = loader('./fixtures/query3.graphql');

      ↓ ↓ ↓ ↓ ↓ ↓

const query = {
  "kind": "Document",
  "definitions": [{
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry1"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "firstName"
        },
        "arguments": [],
        "directives": []
      }]
    }
  }, {
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry3"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "id"
        },
        "arguments": [],
        "directives": []
      }]
    }
  }, {
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry5"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "FragmentSpread",
        "name": {
          "kind": "Name",
          "value": "UserEntry4"
        },
        "directives": []
      }]
    }
  }, {
    "kind": "FragmentDefinition",
    "name": {
      "kind": "Name",
      "value": "UserEntry4"
    },
    "typeCondition": {
      "kind": "NamedType",
      "name": {
        "kind": "Name",
        "value": "User"
      }
    },
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "FragmentSpread",
        "name": {
          "kind": "Name",
          "value": "UserEntry1"
        },
        "directives": []
      }, {
        "kind": "FragmentSpread",
        "name": {
          "kind": "Name",
          "value": "UserEntry5"
        },
        "directives": []
      }]
    }
  }, {
    "kind": "OperationDefinition",
    "operation": "query",
    "name": {
      "kind": "Name",
      "value": "User"
    },
    "variableDefinitions": [],
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "user"
        },
        "arguments": [{
          "kind": "Argument",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "value": {
            "kind": "IntValue",
            "value": "5"
          }
        }],
        "directives": [],
        "selectionSet": {
          "kind": "SelectionSet",
          "selections": [{
            "kind": "FragmentSpread",
            "name": {
              "kind": "Name",
              "value": "UserEntry4"
            },
            "directives": []
          }]
        }
      }]
    }
  }],
  "loc": {
    "start": 0,
    "end": 371,
    "source": {
      "body": "fragment UserEntry1 on User {\\n  firstName\\n}\\n\\nfragment UserEntry3 on User {\\n  id\\n}\\n#import \\"./fragment3.graphql\\"\\n\\nfragment UserEntry5 on User {\\n  ...UserEntry4\\n}\\n#import \\"./fragment1.graphql\\"\\n#import \\"./fragment4.graphql\\"\\n\\nfragment UserEntry4 on User {\\n  ...UserEntry1\\n  ...UserEntry5\\n}\\n#import './fragment3.graphql'\\n\\nquery User {\\n  user(id: 5) {\\n    ...UserEntry4\\n  }\\n}\\n\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1
      }
    }
  }
};

`;

exports[`macros [loader] without fragment: [loader] without fragment 1`] = `

import { loader } from 'graphql.macro';
const query = loader('./fixtures/query.graphql');

      ↓ ↓ ↓ ↓ ↓ ↓

const query = {
  "kind": "Document",
  "definitions": [{
    "kind": "OperationDefinition",
    "operation": "query",
    "name": {
      "kind": "Name",
      "value": "User"
    },
    "variableDefinitions": [],
    "directives": [],
    "selectionSet": {
      "kind": "SelectionSet",
      "selections": [{
        "kind": "Field",
        "name": {
          "kind": "Name",
          "value": "user"
        },
        "arguments": [{
          "kind": "Argument",
          "name": {
            "kind": "Name",
            "value": "id"
          },
          "value": {
            "kind": "IntValue",
            "value": "5"
          }
        }],
        "directives": [],
        "selectionSet": {
          "kind": "SelectionSet",
          "selections": [{
            "kind": "Field",
            "name": {
              "kind": "Name",
              "value": "firstName"
            },
            "arguments": [],
            "directives": []
          }, {
            "kind": "Field",
            "name": {
              "kind": "Name",
              "value": "lastName"
            },
            "arguments": [],
            "directives": []
          }]
        }
      }]
    }
  }],
  "loc": {
    "start": 0,
    "end": 62,
    "source": {
      "body": "query User {\\n  user(id: 5) {\\n    firstName\\n    lastName\\n  }\\n}\\n",
      "name": "GraphQL request",
      "locationOffset": {
        "line": 1,
        "column": 1
      }
    }
  }
};

`;
